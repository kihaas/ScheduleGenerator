from typing import List, Dict, Tuple
import random
from app.db.database import database
from app.db.models import Lesson, Subject
from app.services.subject_services import subject_service
from app.services.teacher_service import teacher_service


class ScheduleService:
    async def get_all_lessons(self) -> List[Lesson]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏"""
        rows = await database.fetch_all(
            'SELECT id, day, time_slot, teacher, subject_name, editable FROM lessons ORDER BY day, time_slot'
        )
        lessons = []
        for row in rows:
            lesson = Lesson(
                id=row[0],
                day=row[1],
                time_slot=row[2],
                teacher=row[3],
                subject_name=row[4],
                editable=bool(row[5]) if row[5] is not None else True
            )
            lessons.append(lesson)
        return lessons

    async def save_lessons(self, lessons: List[Lesson]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫–∏"""
        await database.execute('DELETE FROM lessons')

        for lesson in lessons:
            await database.execute(
                'INSERT INTO lessons (day, time_slot, teacher, subject_name, editable) VALUES (?, ?, ?, ?, ?)',
                (lesson.day, lesson.time_slot, lesson.teacher, lesson.subject_name, int(lesson.editable))
            )

    async def generate_schedule(self) -> List[Lesson]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")

        subjects = await subject_service.get_all_subjects()
        negative_filters = await subject_service.get_negative_filters()

        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(subjects)}")
        print(f"üö´ –ù–∞–π–¥–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π: {len(negative_filters)}")

        if not subjects:
            print("‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return []

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await database.execute('DELETE FROM lessons')

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º remaining_pairs –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        for subject in subjects:
            await database.execute(
                'UPDATE subjects SET remaining_pairs = ?, remaining_hours = ? WHERE id = ?',
                (subject.total_hours // 2, subject.total_hours, subject.id)
            )

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        subjects = await subject_service.get_all_subjects()

        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        lessons = []
        subject_index = 0

        for day in range(5):  # –ü–Ω-–ü—Ç
            for time_slot in range(4):  # 4 –ø–∞—Ä—ã
                if not subjects:
                    break

                # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –ø–∞—Ä–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                subject_found = None
                for i in range(len(subjects)):
                    subject = subjects[(subject_index + i) % len(subjects)]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
                    if subject.teacher in negative_filters:
                        restrictions = negative_filters[subject.teacher]
                        if (day in restrictions.get('restricted_days', []) or
                                time_slot in restrictions.get('restricted_slots', [])):
                            print(f"üö´ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {subject.teacher} - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –¥–Ω—è {day}, —Å–ª–æ—Ç–∞ {time_slot}")
                            continue

                    if subject.remaining_pairs > 0:
                        subject_found = subject
                        break

                if not subject_found:
                    continue

                lesson = Lesson(
                    day=day,
                    time_slot=time_slot,
                    teacher=subject_found.teacher,
                    subject_name=subject_found.subject_name,
                    editable=True
                )
                lessons.append(lesson)

                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä –∏ —á–∞—Å–æ–≤
                await database.execute(
                    'UPDATE subjects SET remaining_pairs = remaining_pairs - 1, remaining_hours = remaining_hours - 2 WHERE id = ?',
                    (subject_found.id,)
                )

                subject_index += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫–∏
        for lesson in lessons:
            await database.execute(
                'INSERT INTO lessons (day, time_slot, teacher, subject_name, editable) VALUES (?, ?, ?, ?, ?)',
                (lesson.day, lesson.time_slot, lesson.teacher, lesson.subject_name, int(lesson.editable))
            )

        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        final_subjects = await subject_service.get_all_subjects()
        for subject in final_subjects:
            print(
                f"üìä {subject.teacher} - {subject.subject_name}: {subject.remaining_hours}—á –æ—Å—Ç–∞–ª–æ—Å—å, {subject.remaining_pairs} –ø–∞—Ä")

        return lessons

    async def remove_lesson(self, day: int, time_slot: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫"""
        lesson = await database.fetch_one(
            'SELECT teacher, subject_name, editable FROM lessons WHERE day = ? AND time_slot = ?',
            (day, time_slot)
        )

        if not lesson:
            return False

        teacher, subject_name, editable = lesson
        if editable == 0:
            return False

        await database.execute(
            'DELETE FROM lessons WHERE day = ? AND time_slot = ?',
            (day, time_slot)
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä—É
        await database.execute('''
            UPDATE subjects 
            SET remaining_pairs = remaining_pairs + 1,
                remaining_hours = remaining_hours + 2
            WHERE teacher = ? AND subject_name = ?
        ''', (teacher, subject_name))

        return True

    async def update_lesson(self, day: int, time_slot: int, new_teacher: str, new_subject_name: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫ - –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥–º–µ—Ç"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫
        current_lesson = await database.fetch_one(
            'SELECT teacher, subject_name, editable FROM lessons WHERE day = ? AND time_slot = ?',
            (day, time_slot)
        )

        if not current_lesson or not current_lesson[2]:  # editable check
            return False

        old_teacher, old_subject_name, _ = current_lesson

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        new_subject = await database.fetch_one(
            'SELECT id, remaining_pairs FROM subjects WHERE teacher = ? AND subject_name = ?',
            (new_teacher, new_subject_name)
        )

        if not new_subject:
            print(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {new_teacher} - {new_subject_name}")
            return False

        if new_subject[1] <= 0:  # remaining_pairs check
            print(f"‚ùå –ù–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ä —É –ø—Ä–µ–¥–º–µ—Ç–∞: {new_teacher} - {new_subject_name}")
            return False

        # –ï—Å–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Ç–æ—Ç –∂–µ –ø—Ä–µ–¥–º–µ—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if old_teacher == new_teacher and old_subject_name == new_subject_name:
            print("‚ÑπÔ∏è –ó–∞–º–µ–Ω–∞ –Ω–∞ —Ç–æ—Ç –∂–µ –ø—Ä–µ–¥–º–µ—Ç - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return True

        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        try:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä—É —Å—Ç–∞—Ä–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É
            await database.execute('''
                UPDATE subjects 
                SET remaining_pairs = remaining_pairs + 1,
                    remaining_hours = remaining_hours + 2
                WHERE teacher = ? AND subject_name = ?
            ''', (old_teacher, old_subject_name))

            # –ó–∞–±–∏—Ä–∞–µ–º –ø–∞—Ä—É —É –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            await database.execute('''
                UPDATE subjects 
                SET remaining_pairs = remaining_pairs - 1,
                    remaining_hours = remaining_hours - 2
                WHERE teacher = ? AND subject_name = ?
            ''', (new_teacher, new_subject_name))

            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–∫
            await database.execute(
                'UPDATE lessons SET teacher = ?, subject_name = ? WHERE day = ? AND time_slot = ?',
                (new_teacher, new_subject_name, day, time_slot)
            )

            print(f"‚úÖ –ó–∞–º–µ–Ω–∞: {old_teacher} - {old_subject_name} ‚Üí {new_teacher} - {new_subject_name}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —É—Ä–æ–∫–∞: {e}")
            return False

    async def get_statistics(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            subjects = await subject_service.get_all_subjects()
            lessons = await self.get_all_lessons()
            teachers = await teacher_service.get_all_teachers()

            total_hours = sum(s.total_hours for s in subjects)
            remaining_hours = sum(s.remaining_hours for s in subjects)
            scheduled_pairs = len(lessons)
            remaining_pairs = sum(s.remaining_pairs for s in subjects)

            print(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, {len(teachers)} –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, {scheduled_pairs} –ø–∞—Ä, {remaining_hours}—á –æ—Å—Ç–∞–ª–æ—Å—å")

            return {
                'total_subjects': len(subjects),
                'total_teachers': len(teachers),
                'total_hours': total_hours,
                'remaining_hours': remaining_hours,
                'scheduled_pairs': scheduled_pairs,
                'remaining_pairs': remaining_pairs
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")
            return {
                'total_subjects': 0,
                'total_teachers': 0,
                'total_hours': 0,
                'remaining_hours': 0,
                'scheduled_pairs': 0,
                'remaining_pairs': 0
            }

    def get_week_days(self):
        return ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

    def get_time_slots(self):
        return [
            {'start': '9:00', 'end': '10:30'},
            {'start': '10:40', 'end': '12:10'},
            {'start': '12:40', 'end': '14:10'},
            {'start': '14:20', 'end': '15:50'}
        ]


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
schedule_service = ScheduleService()