from typing import List, Optional
from app.db.database import database
from app.db.models import Subject
from app.services.teacher_service import teacher_service


class SubjectService:
    async def get_all_subjects(self) -> List[Subject]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã subjects"""
        rows = await database.fetch_all(
            'SELECT id, teacher, subject_name, total_hours, remaining_hours, '
            'remaining_pairs, priority, max_per_day FROM subjects ORDER BY teacher, subject_name'
        )
        subjects = []
        for row in rows:
            subject = Subject(
                id=row[0],
                teacher=row[1],
                subject_name=row[2],
                total_hours=row[3],
                remaining_hours=row[4],
                remaining_pairs=row[5],
                priority=row[6],
                max_per_day=row[7]
            )
            subjects.append(subject)
        return subjects

    async def get_subject_by_name(self, teacher: str, subject_name: str) -> Optional[Subject]:
        """–ù–∞–π—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∏ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        row = await database.fetch_one(
            'SELECT id, teacher, subject_name, total_hours, remaining_hours, '
            'remaining_pairs, priority, max_per_day FROM subjects '
            'WHERE teacher = ? AND subject_name = ?',
            (teacher, subject_name)
        )

        if not row:
            return None

        return Subject(
            id=row[0],
            teacher=row[1],
            subject_name=row[2],
            total_hours=row[3],
            remaining_hours=row[4],
            remaining_pairs=row[5],
            priority=row[6],
            max_per_day=row[7]
        )

    async def create_subject(self, teacher: str, subject_name: str, hours: int,
                             priority: int = 0, max_per_day: int = 2) -> Subject:
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        await teacher_service.create_teacher(teacher)

        result = await database.execute(
            'INSERT INTO subjects (teacher, subject_name, total_hours, remaining_hours, '
            'remaining_pairs, priority, max_per_day) VALUES (?, ?, ?, ?, ?, ?, ?)',
            (teacher, subject_name, hours, hours, hours // 2, priority, max_per_day)
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        row = await database.fetch_one(
            'SELECT id, teacher, subject_name, total_hours, remaining_hours, '
            'remaining_pairs, priority, max_per_day FROM subjects WHERE id = ?',
            (result.lastrowid,)
        )

        return Subject(
            id=row[0],
            teacher=row[1],
            subject_name=row[2],
            total_hours=row[3],
            remaining_hours=row[4],
            remaining_pairs=row[5],
            priority=row[6],
            max_per_day=row[7]
        )

    async def delete_subject(self, subject_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏"""
        try:
            print(f"üîç –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–∞ —Å ID: {subject_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            subject_row = await database.fetch_one(
                'SELECT id, teacher, subject_name FROM subjects WHERE id = ?',
                (subject_id,)
            )

            if not subject_row:
                print(f"‚ùå –ü—Ä–µ–¥–º–µ—Ç —Å ID {subject_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            teacher, subject_name = subject_row[1], subject_row[2]
            print(f"üìã –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {teacher} - {subject_name}")

            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏
            delete_lessons_result = await database.execute(
                'DELETE FROM lessons WHERE teacher = ? AND subject_name = ?',
                (teacher, subject_name)
            )
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É—Ä–æ–∫–æ–≤: {delete_lessons_result.rowcount}")

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç
            delete_subject_result = await database.execute(
                'DELETE FROM subjects WHERE id = ?',
                (subject_id,)
            )

            success = delete_subject_result.rowcount > 0
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {success}")

            return success

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_id}: {e}")
            return False


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
subject_service = SubjectService()