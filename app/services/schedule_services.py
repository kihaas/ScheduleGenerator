from typing import List, Dict, Tuple
import random
from app.db.database import database
from app.db.models import Lesson, Subject
from app.services.subject_services import subject_service
from app.services.teacher_service import teacher_service


class ScheduleService:
    async def get_all_lessons(self) -> List[Lesson]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Ä–æ–∫–∏"""
        rows = await database.fetch_all(
            'SELECT id, day, time_slot, teacher, subject_name, editable FROM lessons ORDER BY day, time_slot'
        )
        lessons = []
        for row in rows:
            lesson = Lesson(
                id=row[0],
                day=row[1],
                time_slot=row[2],
                teacher=row[3],
                subject_name=row[4],
                editable=bool(row[5]) if row[5] is not None else True
            )
            lessons.append(lesson)
        return lessons

    async def save_lessons(self, lessons: List[Lesson]):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Ä–æ–∫–∏"""
        await database.execute('DELETE FROM lessons')

        for lesson in lessons:
            await database.execute(
                'INSERT INTO lessons (day, time_slot, teacher, subject_name, editable) VALUES (?, ?, ?, ?, ?)',
                (lesson.day, lesson.time_slot, lesson.teacher, lesson.subject_name, int(lesson.editable))
            )

    async def generate_schedule(self) -> List[Lesson]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")

        subjects = await subject_service.get_all_subjects()
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(subjects)}")

        if not subjects:
            print("‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return []

        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        await database.execute('DELETE FROM lessons')

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º remaining_pairs –¥–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        for subject in subjects:
            await database.execute(
                'UPDATE subjects SET remaining_pairs = ?, remaining_hours = ? WHERE id = ?',
                (subject.total_hours // 2, subject.total_hours, subject.id)
            )

        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        subjects = await subject_service.get_all_subjects()

        # –°–æ–∑–¥–∞–µ–º —É—Ä–æ–∫–∏
        lessons = []
        subject_index = 0

        for day in range(5):  # –ü–Ω-–ü—Ç
            for time_slot in range(4):  # 4 –ø–∞—Ä—ã
                if not subjects:
                    break

                # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –ø–∞—Ä–∞–º–∏
                subject_found = None
                for i in range(len(subjects)):
                    subject = subjects[(subject_index + i) % len(subjects)]
                    if subject.remaining_pairs > 0:
                        subject_found = subject
                        break

                if not subject_found:
                    break

                lesson = Lesson(
                    day=day,
                    time_slot=time_slot,
                    teacher=subject_found.teacher,
                    subject_name=subject_found.subject_name,
                    editable=True
                )
                lessons.append(lesson)

                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–∞—Ä –∏ —á–∞—Å–æ–≤
                await database.execute(
                    'UPDATE subjects SET remaining_pairs = remaining_pairs - 1, remaining_hours = remaining_hours - 2 WHERE id = ?',
                    (subject_found.id,)
                )

                subject_index += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫–∏
        for lesson in lessons:
            await database.execute(
                'INSERT INTO lessons (day, time_slot, teacher, subject_name, editable) VALUES (?, ?, ?, ?, ?)',
                (lesson.day, lesson.time_slot, lesson.teacher, lesson.subject_name, int(lesson.editable))
            )

        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {len(lessons)}")

        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        final_subjects = await subject_service.get_all_subjects()
        for subject in final_subjects:
            print(
                f"üìä {subject.teacher} - {subject.subject_name}: {subject.remaining_hours}—á –æ—Å—Ç–∞–ª–æ—Å—å, {subject.remaining_pairs} –ø–∞—Ä")

        return lessons

    async def remove_lesson(self, day: int, time_slot: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫"""
        lesson = await database.fetch_one(
            'SELECT teacher, subject_name, editable FROM lessons WHERE day = ? AND time_slot = ?',
            (day, time_slot)
        )

        if not lesson:
            return False

        teacher, subject_name, editable = lesson
        if editable == 0:
            return False

        await database.execute(
            'DELETE FROM lessons WHERE day = ? AND time_slot = ?',
            (day, time_slot)
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞—Ä—É
        await database.execute('''
            UPDATE subjects 
            SET remaining_pairs = remaining_pairs + 1,
                remaining_hours = remaining_hours + 2
            WHERE teacher = ? AND subject_name = ?
        ''', (teacher, subject_name))

        return True

    async def update_lesson(self, day: int, time_slot: int, new_teacher: str, new_subject_name: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —É—Ä–æ–∫"""
        current_lesson = await database.fetch_one(
            'SELECT teacher, subject_name, editable FROM lessons WHERE day = ? AND time_slot = ?',
            (day, time_slot)
        )

        if not current_lesson or not current_lesson[2]:
            return False

        old_teacher, old_subject_name, _ = current_lesson

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä—ã
        await database.execute('''
            UPDATE subjects 
            SET remaining_pairs = remaining_pairs + 1,
                remaining_hours = remaining_hours + 2
            WHERE teacher = ? AND subject_name = ?
        ''', (old_teacher, old_subject_name))

        await database.execute('''
            UPDATE subjects 
            SET remaining_pairs = remaining_pairs - 1,
                remaining_hours = remaining_hours - 2
            WHERE teacher = ? AND subject_name = ?
        ''', (new_teacher, new_subject_name))

        await database.execute(
            'UPDATE lessons SET teacher = ?, subject_name = ? WHERE day = ? AND time_slot = ?',
            (new_teacher, new_subject_name, day, time_slot)
        )

        return True

    async def get_statistics(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            subjects = await subject_service.get_all_subjects()
            lessons = await self.get_all_lessons()
            teachers = await teacher_service.get_all_teachers()

            total_hours = sum(s.total_hours for s in subjects)
            remaining_hours = sum(s.remaining_hours for s in subjects)
            scheduled_pairs = len(lessons)
            remaining_pairs = sum(s.remaining_pairs for s in subjects)

            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(subjects)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤, {total_hours}—á –≤—Å–µ–≥–æ, {remaining_hours}—á –æ—Å—Ç–∞–ª–æ—Å—å")

            return {
                'total_subjects': len(subjects),
                'total_teachers': len(teachers),  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'total_hours': total_hours,
                'remaining_hours': remaining_hours,
                'scheduled_pairs': scheduled_pairs,  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                'remaining_pairs': remaining_pairs  # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {e}")
            return {
                'total_subjects': 0,
                'total_teachers': 0,
                'total_hours': 0,
                'remaining_hours': 0,
                'scheduled_pairs': 0,
                'remaining_pairs': 0
            }

    def get_week_days(self):
        return ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞', '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']

    def get_time_slots(self):
        return [
            {'start': '9:00', 'end': '10:30'},
            {'start': '10:40', 'end': '12:10'},
            {'start': '12:40', 'end': '14:10'},
            {'start': '14:20', 'end': '15:50'}
        ]


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
schedule_service = ScheduleService()